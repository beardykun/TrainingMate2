CREATE TABLE TrainingHistory (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    training_template_id INTEGER NOT NULL,
    user_id TEXT NOT NULL,
    name TEXT NOT NULL,
    groups TEXT NOT NULL,
    exercises TEXT NOT NULL,
    done_exercises TEXT NOT NULL,
    start_time INTEGER NOT NULL,
    end_time INTEGER NOT NULL,
    total_lifted_weight REAL NOT NULL, -- changed to REAL to match Kotlin's Double
    status TEXT NOT NULL DEFAULT 'ONGOING' CHECK (status IN ('ONGOING', 'COMPLETED')),
    FOREIGN KEY(user_id) REFERENCES User(id)
);

insertTrainingRecord:
INSERT OR REPLACE
INTO TrainingHistory(
    id,
    training_template_id,
    user_id,
    name,
    groups,
    exercises,
    done_exercises,
    start_time,
    end_time,
    total_lifted_weight
)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

getTrainingRecordById:
SELECT *
FROM TrainingHistory
WHERE id IS ?;

getOngoingTraining:
SELECT *
FROM TrainingHistory
WHERE status = 'ONGOING';

countOngoingTraining:
SELECT COUNT(*)
FROM TrainingHistory
WHERE status = 'ONGOING';

updateEndTime:
UPDATE TrainingHistory
SET end_time = ?, total_lifted_weight = ?, done_exercises = ?
WHERE id = ?;

updateStartTime:
UPDATE TrainingHistory
SET start_time = ?, total_lifted_weight = ?, done_exercises = ?
WHERE id = ?;

updateStatus:
UPDATE TrainingHistory
SET status = ?
WHERE id = ?;

getLatestHistoryTrainings:
SELECT *
FROM TrainingHistory
WHERE total_lifted_weight != 0.0
ORDER BY start_time
LIMIT 30;

getGroupTrainings:
SELECT *
FROM TrainingHistory
WHERE groups = ?;

getParticularTrainings:
SELECT *
FROM TrainingHistory
WHERE training_template_id = ?;

getTrainingsWithExercise:
SELECT *
FROM TrainingHistory
WHERE name = ?;

deleteTrainingRecord:
DELETE
FROM TrainingHistory
WHERE id = ?;

getLastTraining:
SELECT * FROM TrainingHistory
WHERE status = 'COMPLETED' AND training_template_id = ?
ORDER BY id DESC
LIMIT 1;



